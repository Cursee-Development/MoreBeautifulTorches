plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'java'
    id 'idea'
}

base {
    archivesName = "${mod_id}-fabric-${minecraft_version}"
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    compileOnly group:'org.spongepowered', name:'mixin', version:'0.8.5'

    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings loom.officialMojangMappings()
    // mappings loom.layered() {
    //     officialMojangMappings()
    //     parchment("org.parchmentmc.data:parchment-1.20.3:2023.12.31@zip")
    // }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    // MonoLib
    modImplementation "curse.maven:monolib-968432:5314433"

    // optional menu for mods inside fabric, similar to Forge/NeoForge
    modApi("com.terraformersmc:modmenu:10.0.0-beta.1") { exclude(module: "fabric-api") }
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }

    mixin {
        defaultRefmapName.set("${mod_id}_fabric.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.named('compileJava', JavaCompile).configure {
    source(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}